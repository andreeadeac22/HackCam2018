import torch
import torch.nn as nn
import torch.utils.model_zoo as model_zoo
import math
import numpy as np

class VGGPlaces(nn.Module):
    def __init__(self, num_classes=401):
        super(VGGPlaces, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, (3, 3), (1, 1), (1, 1))
        self.relu1 = nn.ReLU()
        self.conv2 = nn.Conv2d(64, 64, (3, 3), (1, 1), (1, 1))
        self.relu2 = nn.ReLU()
        self.maxpool1 = nn.MaxPool2d((2, 2), (2, 2), (0, 0), ceil_mode=True)
        self.conv3 = nn.Conv2d(64, 128, (3, 3), (1, 1), (1, 1))
        self.relu3 = nn.ReLU()
        self.conv4 = nn.Conv2d(128, 128, (3, 3), (1, 1), (1, 1))
        self.relu4 = nn.ReLU()
        self.maxpool2= nn.MaxPool2d((2, 2), (2, 2), (0, 0), ceil_mode=True)
        self.conv5 = nn.Conv2d(128, 256, (3, 3), (1, 1), (1, 1))
        self.relu5 = nn.ReLU()
        self.conv6 = nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1))
        self.relu5 = nn.ReLU()
        self.conv7 = nn.Conv2d(256, 256, (3, 3), (1, 1), (1, 1))
        self.relu6 = nn.ReLU()
        self.maxpool3 = nn.MaxPool2d((2, 2), (2, 2), (0, 0), ceil_mode=True)
        self.conv8 = nn.Conv2d(256, 512, (3, 3), (1, 1), (1, 1))
        self.relu6 = nn.ReLU()
        self.conv9 = nn.Conv2d(512, 512, (3, 3), (1, 1), (1, 1))
        self.relu7 = nn.ReLU()
        self.conv10 = nn.Conv2d(512, 512, (3, 3), (1, 1), (1, 1))
        self.relu8 = nn.ReLU()
        self.maxpool4 = nn.MaxPool2d((2, 2), (2, 2), (0, 0), ceil_mode=True)
        self.conv11= nn.Conv2d(512, 512, (3, 3), (1, 1), (1, 1))
        self.relu9 = nn.ReLU()
        self.conv12 = nn.Conv2d(512, 512, (3, 3), (1, 1), (1, 1))
        self.relu9 = nn.ReLU()
        self.conv13 = nn.Conv2d(512, 512, (3, 3), (1, 1), (1, 1))
        self.relu10 = nn.ReLU()
        self.maxpool5= nn.MaxPool2d((2, 2), (2, 2), (0, 0), ceil_mode=True)
        self.fc1 = nn.Linear(25088, 4096)  # Linear,
        self.relu11 = nn.ReLU()
        self.dropout1 = nn.Dropout(0.5)
        self.fc2 = nn.Linear(4096, 4096)  # Linear,
        self.relu12 = nn.ReLU()
        self.dropout2 = nn.Dropout(0.5)
        self.fc3 = nn.Linear(4096, 401)  # Linear,
        self._initialize_weights()

    def forward(self, x):
        print("input", x)
        out = self.conv1(x)
        out = self.relu1(out)
        out = self.conv2(out)
        out = self.relu2(out)
        out = self.maxpool1(out)
        out = self.conv3(out)
        out = self.relu3(out)
        out = self.conv4(out)
        out = self.relu4(out)
        out = self.maxpool2(out)
        out = self.conv5(out)
        out = self.relu5(out)
        out = self.conv6(out)
        out = self.relu5(out)
        out = self.conv7(out)
        out = self.relu6(out)
        out = self.maxpool3(out)
        out = self.conv8(out)
        out = self.relu6(out)
        out = self.conv9(out)
        out = self.relu7(out)
        out = self.conv10(out)
        out = self.relu8(out)
        out = self.maxpool4(out)
        out = self.conv11(out)
        out = self.relu9(out)
        out = self.conv12(out)
        out = self.relu9(out)
        out = self.conv13(out)
        out = self.relu10(out)
        out = self.maxpool5(out)
        print("out", out.shape)
        out = out.view(25088)
        out = self.fc1(out)
        out = self.relu11(out)
        #out = self.dropout1(out)
        out = self.fc2(out)
        out = self.relu12(out)
        #out = self.dropout2(out)
        out = self.fc3(out)
        return out

    def _initialize_weights(self):
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
                m.weight.data.normal_(0, math.sqrt(2. / n))
                if m.bias is not None:
                    m.bias.data.zero_()
            elif isinstance(m, nn.BatchNorm2d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()
            elif isinstance(m, nn.Linear):
                m.weight.data.normal_(0, 0.01)
                m.bias.data.zero_()

    def load_weights(self):
        conv1_bs = np.load('conv1_bs.npy')
        self.conv1.bias = torch.nn.Parameter(torch.from_numpy(conv1_bs).float())
        conv1_ws = np.load('conv1_ws.npy')
        conv1_ws = np.reshape(conv1_ws, self.conv1.weight.shape)
        self.conv1.weight = torch.nn.Parameter(torch.from_numpy(conv1_ws).float())

        conv2_bs = np.load('conv2_bs.npy')
        self.conv2.bias = torch.nn.Parameter(torch.from_numpy(conv2_bs).float())
        conv2_ws = np.load('conv2_ws.npy')
        conv2_ws = np.reshape(conv2_ws, self.conv2.weight.shape)
        self.conv2.weight = torch.nn.Parameter(torch.from_numpy(conv2_ws).float())

        conv3_bs = np.load('conv3_bs.npy')
        self.conv3.bias = torch.nn.Parameter(torch.from_numpy(conv3_bs).float())
        conv3_ws = np.load('conv3_ws.npy')
        print("conv3_ws", conv3_ws.shape)
        conv3_ws = np.reshape(conv3_ws, self.conv3.weight.shape)
        self.conv3.weight = torch.nn.Parameter(torch.from_numpy(conv3_ws).float())
        print("conv3",self.conv3.weight.shape)

        conv4_bs = np.load('conv4_bs.npy')
        self.conv4.bias = torch.nn.Parameter(torch.from_numpy(conv4_bs).float())
        conv4_ws = np.load('conv4_ws.npy')
        conv4_ws = np.reshape(conv4_ws, self.conv4.weight.shape)
        self.conv4.weight = torch.nn.Parameter(torch.from_numpy(conv4_ws).float())

        conv5_bs = np.load('conv5_bs.npy')
        self.conv5.bias = torch.nn.Parameter(torch.from_numpy(conv5_bs).float())
        conv5_ws = np.load('conv5_ws.npy')
        conv5_ws = np.reshape(conv5_ws, self.conv5.weight.shape)
        self.conv5.weight = torch.nn.Parameter(torch.from_numpy(conv5_ws).float())

        conv6_bs = np.load('conv6_bs.npy')
        self.conv6.bias = torch.nn.Parameter(torch.from_numpy(conv6_bs).float())
        conv6_ws = np.load('conv6_ws.npy')
        conv6_ws = np.reshape(conv6_ws, self.conv6.weight.shape)
        self.conv6.weight = torch.nn.Parameter(torch.from_numpy(conv6_ws).float())

        conv7_bs = np.load('conv7_bs.npy')
        self.conv7.bias = torch.nn.Parameter(torch.from_numpy(conv7_bs).float())
        conv7_ws = np.load('conv7_ws.npy')
        conv7_ws = np.reshape(conv7_ws, self.conv7.weight.shape)
        self.conv7.weight = torch.nn.Parameter(torch.from_numpy(conv7_ws).float())

        conv8_bs = np.load('conv8_bs.npy')
        self.conv8.bias = torch.nn.Parameter(torch.from_numpy(conv8_bs).float())
        conv8_ws = np.load('conv8_ws.npy')
        conv8_ws = np.reshape(conv8_ws, self.conv8.weight.shape)
        self.conv8.weight = torch.nn.Parameter(torch.from_numpy(conv8_ws).float())

        conv9_bs = np.load('conv9_bs.npy')
        self.conv9.bias = torch.nn.Parameter(torch.from_numpy(conv9_bs).float())
        conv9_ws = np.load('conv9_ws.npy')
        conv9_ws = np.reshape(conv9_ws, self.conv9.weight.shape)
        self.conv9.weight = torch.nn.Parameter(torch.from_numpy(conv9_ws).float())

        conv10_bs = np.load('conv10_bs.npy')
        self.conv10.bias = torch.nn.Parameter(torch.from_numpy(conv10_bs).float())
        conv10_ws = np.load('conv10_ws.npy')
        conv10_ws = np.reshape(conv10_ws, self.conv10.weight.shape)
        self.conv10.weight = torch.nn.Parameter(torch.from_numpy(conv10_ws).float())

        conv11_bs = np.load('conv11_bs.npy')
        self.conv11.bias = torch.nn.Parameter(torch.from_numpy(conv11_bs).float())
        conv11_ws = np.load('conv11_ws.npy')
        conv11_ws = np.reshape(conv11_ws, self.conv11.weight.shape)
        self.conv11.weight = torch.nn.Parameter(torch.from_numpy(conv11_ws).float())

        conv12_bs = np.load('conv12_bs.npy')
        self.conv12.bias = torch.nn.Parameter(torch.from_numpy(conv12_bs).float())
        conv12_ws = np.load('conv12_ws.npy')
        conv12_ws = np.reshape(conv12_ws, self.conv12.weight.shape)
        self.conv12.weight = torch.nn.Parameter(torch.from_numpy(conv12_ws).float())

        conv13_bs = np.load('conv13_bs.npy')
        self.conv13.bias = torch.nn.Parameter(torch.from_numpy(conv13_bs).float())
        conv13_ws = np.load('conv13_ws.npy')
        conv13_ws = np.reshape(conv13_ws, self.conv13.weight.shape)
        self.conv13.weight = torch.nn.Parameter(torch.from_numpy(conv13_ws).float())

        fc1_bs = np.load('fc1_bs.npy')
        self.fc1.bias = torch.nn.Parameter(torch.from_numpy(fc1_bs).float())
        fc1_ws = np.load('fc1_ws.npy')
        fc1_ws = np.reshape(fc1_ws, self.fc1.weight.shape)
        self.fc1.weight = torch.nn.Parameter(torch.from_numpy(fc1_ws).float())

        fc2_bs = np.load('fc2_bs.npy')
        self.fc2.bias = torch.nn.Parameter(torch.from_numpy(fc2_bs).float())
        fc2_ws = np.load('fc2_ws.npy')
        fc2_ws = np.reshape(fc2_ws, self.fc2.weight.shape)
        self.fc2.weight = torch.nn.Parameter(torch.from_numpy(fc2_ws).float())

        fc3_bs = np.load('fc3_bs.npy')
        self.fc3.bias = torch.nn.Parameter(torch.from_numpy(fc3_bs).float())
        fc3_ws = np.load('fc3_ws.npy')
        fc3_ws = np.reshape(fc3_ws, self.fc3.weight.shape)
        self.fc3.weight = torch.nn.Parameter(torch.from_numpy(fc3_ws).float())